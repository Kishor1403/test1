{"ast":null,"code":"var _jsxFileName = \"/Users/rdshinde/Documents/Project/AI_Based_OCR/src/components/ImageInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { Loader } from \"./Loader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ImageInput = () => {\n  _s();\n  const [image, setImage] = useState(null);\n  const [res, setRes] = useState(null);\n  const [isLoading, setLoading] = useState(false);\n  const handleImageChange = event => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      setImage(reader.result);\n      sendFileToOCR(file);\n    };\n    if (file) {\n      reader.readAsDataURL(file);\n    }\n  };\n  const sendFileToOCR = async file => {\n    const data = new FormData();\n    data.append(\"file\", file);\n    try {\n      setLoading(true);\n      const response = await axios.post(\"https://app.nanonets.com/api/v2/OCR/Model/1b103ab7-bb5d-496c-93b2-ad3bce96a3d6/LabelFile/?async=false\", data, {\n        headers: {\n          authorization: \"Basic \" + btoa(\"55b88c5f-dda9-11ed-8c4e-963352d5fbdb:\")\n        }\n      });\n\n      //   console.log(response.data.result[0].prediction[0].ocr_text);\n      setRes(response.data.result[0].prediction[0].ocr_text);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"border\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), image && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image,\n        width: 150,\n        height: 150,\n        alt: \"uploaded image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-primary\",\n        children: res\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(ImageInput, \"nH61ygQCncKuxxS/PtadLK9K14E=\");\n_c = ImageInput;\nvar _c;\n$RefreshReg$(_c, \"ImageInput\");","map":{"version":3,"names":["React","useState","axios","Loader","jsxDEV","_jsxDEV","Fragment","_Fragment","ImageInput","_s","image","setImage","res","setRes","isLoading","setLoading","handleImageChange","event","file","target","files","reader","FileReader","onloadend","result","sendFileToOCR","readAsDataURL","data","FormData","append","response","post","headers","authorization","btoa","prediction","ocr_text","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","onChange","src","width","height","alt","_c","$RefreshReg$"],"sources":["/Users/rdshinde/Documents/Project/AI_Based_OCR/src/components/ImageInput.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { Loader } from \"./Loader\";\n\nexport const ImageInput = () => {\n  const [image, setImage] = useState(null);\n  const [res, setRes] = useState(null);\n  const [isLoading, setLoading] = useState(false);\n\n  const handleImageChange = (event) => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n\n    reader.onloadend = () => {\n      setImage(reader.result);\n      sendFileToOCR(file);\n    };\n\n    if (file) {\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const sendFileToOCR = async (file) => {\n    const data = new FormData();\n    data.append(\"file\", file);\n\n    try {\n      setLoading(true);\n      const response = await axios.post(\n        \"https://app.nanonets.com/api/v2/OCR/Model/1b103ab7-bb5d-496c-93b2-ad3bce96a3d6/LabelFile/?async=false\",\n        data,\n        {\n          headers: {\n            authorization:\n              \"Basic \" + btoa(\"55b88c5f-dda9-11ed-8c4e-963352d5fbdb:\"),\n          },\n        }\n      );\n\n      //   console.log(response.data.result[0].prediction[0].ocr_text);\n      setRes(response.data.result[0].prediction[0].ocr_text);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"border\">\n          <input type=\"file\" onChange={handleImageChange} />\n          {image && (\n            <img src={image} width={150} height={150} alt=\"uploaded image\" />\n          )}\n          <br />\n          <div className=\"text-primary\">{res}</div>\n        </div>\n      )}\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}